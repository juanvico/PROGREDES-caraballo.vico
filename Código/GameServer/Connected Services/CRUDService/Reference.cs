//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameServer.CRUDService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CRUDService.IPlayerCRUDService")]
    public interface IPlayerCRUDService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCRUDService/Add", ReplyAction="http://tempuri.org/IPlayerCRUDService/AddResponse")]
        PlayerCRUDServiceInterfaces.Player Add(PlayerCRUDServiceInterfaces.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCRUDService/Add", ReplyAction="http://tempuri.org/IPlayerCRUDService/AddResponse")]
        System.Threading.Tasks.Task<PlayerCRUDServiceInterfaces.Player> AddAsync(PlayerCRUDServiceInterfaces.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCRUDService/Get", ReplyAction="http://tempuri.org/IPlayerCRUDService/GetResponse")]
        PlayerCRUDServiceInterfaces.Player Get(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCRUDService/Get", ReplyAction="http://tempuri.org/IPlayerCRUDService/GetResponse")]
        System.Threading.Tasks.Task<PlayerCRUDServiceInterfaces.Player> GetAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCRUDService/Update", ReplyAction="http://tempuri.org/IPlayerCRUDService/UpdateResponse")]
        PlayerCRUDServiceInterfaces.Player Update(System.Guid id, PlayerCRUDServiceInterfaces.Player updatedPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCRUDService/Update", ReplyAction="http://tempuri.org/IPlayerCRUDService/UpdateResponse")]
        System.Threading.Tasks.Task<PlayerCRUDServiceInterfaces.Player> UpdateAsync(System.Guid id, PlayerCRUDServiceInterfaces.Player updatedPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCRUDService/GetPlayers", ReplyAction="http://tempuri.org/IPlayerCRUDService/GetPlayersResponse")]
        PlayerCRUDServiceInterfaces.Player[] GetPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCRUDService/GetPlayers", ReplyAction="http://tempuri.org/IPlayerCRUDService/GetPlayersResponse")]
        System.Threading.Tasks.Task<PlayerCRUDServiceInterfaces.Player[]> GetPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCRUDService/Delete", ReplyAction="http://tempuri.org/IPlayerCRUDService/DeleteResponse")]
        void Delete(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCRUDService/Delete", ReplyAction="http://tempuri.org/IPlayerCRUDService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCRUDService/Exists", ReplyAction="http://tempuri.org/IPlayerCRUDService/ExistsResponse")]
        bool Exists(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCRUDService/Exists", ReplyAction="http://tempuri.org/IPlayerCRUDService/ExistsResponse")]
        System.Threading.Tasks.Task<bool> ExistsAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCRUDService/ExistsByNickname", ReplyAction="http://tempuri.org/IPlayerCRUDService/ExistsByNicknameResponse")]
        bool ExistsByNickname(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCRUDService/ExistsByNickname", ReplyAction="http://tempuri.org/IPlayerCRUDService/ExistsByNicknameResponse")]
        System.Threading.Tasks.Task<bool> ExistsByNicknameAsync(string nickname);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerCRUDServiceChannel : GameServer.CRUDService.IPlayerCRUDService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerCRUDServiceClient : System.ServiceModel.ClientBase<GameServer.CRUDService.IPlayerCRUDService>, GameServer.CRUDService.IPlayerCRUDService {
        
        public PlayerCRUDServiceClient() {
        }
        
        public PlayerCRUDServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayerCRUDServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerCRUDServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerCRUDServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PlayerCRUDServiceInterfaces.Player Add(PlayerCRUDServiceInterfaces.Player player) {
            return base.Channel.Add(player);
        }
        
        public System.Threading.Tasks.Task<PlayerCRUDServiceInterfaces.Player> AddAsync(PlayerCRUDServiceInterfaces.Player player) {
            return base.Channel.AddAsync(player);
        }
        
        public PlayerCRUDServiceInterfaces.Player Get(System.Guid id) {
            return base.Channel.Get(id);
        }
        
        public System.Threading.Tasks.Task<PlayerCRUDServiceInterfaces.Player> GetAsync(System.Guid id) {
            return base.Channel.GetAsync(id);
        }
        
        public PlayerCRUDServiceInterfaces.Player Update(System.Guid id, PlayerCRUDServiceInterfaces.Player updatedPlayer) {
            return base.Channel.Update(id, updatedPlayer);
        }
        
        public System.Threading.Tasks.Task<PlayerCRUDServiceInterfaces.Player> UpdateAsync(System.Guid id, PlayerCRUDServiceInterfaces.Player updatedPlayer) {
            return base.Channel.UpdateAsync(id, updatedPlayer);
        }
        
        public PlayerCRUDServiceInterfaces.Player[] GetPlayers() {
            return base.Channel.GetPlayers();
        }
        
        public System.Threading.Tasks.Task<PlayerCRUDServiceInterfaces.Player[]> GetPlayersAsync() {
            return base.Channel.GetPlayersAsync();
        }
        
        public void Delete(System.Guid id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(System.Guid id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public bool Exists(System.Guid id) {
            return base.Channel.Exists(id);
        }
        
        public System.Threading.Tasks.Task<bool> ExistsAsync(System.Guid id) {
            return base.Channel.ExistsAsync(id);
        }
        
        public bool ExistsByNickname(string nickname) {
            return base.Channel.ExistsByNickname(nickname);
        }
        
        public System.Threading.Tasks.Task<bool> ExistsByNicknameAsync(string nickname) {
            return base.Channel.ExistsByNicknameAsync(nickname);
        }
    }
}
